<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- sqlSession를 만들기위한 환경이다. -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource2"></property>
		<property name="configLocation"
			value="classpath:mybatis/sqlMapConfig.xml" />
		<property name="mapperLocations"
			value="classpath:mybatis/mappers/*Mapper.xml" />
	</bean>
	<!-- Mapper의 SQL구문을 실행할수있다.(SQL문은 session단위로 실행함) -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- spring jdbc를 이용해서 DB사용  -->
	
 	
     <bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations">
		   <list>
		     <!--  <value>/WEB-INF/spring/oracleDB.properties</value>
		      <value>/WEB-INF/spring/mysqlDB.properties</value>   -->
			  <value>/WEB-INF/spring/mariaDB.properties</value>  		       
		       <value>classpath:jwt.properties</value>
		      <value>classpath:s3.properties</value>  
		   </list>
		</property>
	</bean>   

 <!--
	 누락된 파일이나 정의되지 않은 프로퍼티가 있어도 개발 환경에서 유연하게 서버를 기동
	 ignore-unresolvable : 프로퍼티 키가 존재하지 않아도 무시
	 ignore-resource-not-found : 파일 자체가 없어도 무시-->
<!-- 	 <context:property-placeholder 
	 ignore-unresolvable="true"
     ignore-resource-not-found="true"
	 location="/WEB-INF/spring/mariaDB.properties,classpath:s3.properties,classpath:jwt.properties"/>   -->



	<bean id="dataSource2"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource" lazy-init="true">
		<constructor-arg ref="dataSourceOriginal" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="SINGLE_LINE"></property>
				<property name="sqlPrefix" value="[!!! SQL문장!!!! ] "></property>
			</bean>
		</property>
	</bean>


	<!-- Connection Pooling: 미리 생성된 Connection을 얻어서 처리가능 -->
	
	
	<!-- 같은 타입의 빈이 여러개인 경우 @Autowired시 선택되는 빈이라면 primary="true" -->
     <bean id="dataSourceOriginal" primary="true"
		class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName"
			value="${mariaDB.driverClassName}" />
		<property name="url" value="${mariaDB.url}" />
		<property name="username" value="${mariaDB.username}" />
		<property name="password" value="${mariaDB.pwd}" />
	</bean>   

	

<!-- 	<bean id="dataSource2" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
			<property name="driverClassName" value="${oracle.driverClassName}"/> 
			<property name="url" value="${oracle.url}"/> 
			<property name="username" value="${oracle.username}"/> 
			<property name="password" value="${oracle.pwd}"/>
	</bean>   -->
	
	
</beans>





