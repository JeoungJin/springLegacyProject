<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <!--  
    Web MVC 전용 설정
    Controller, ViewResolver, 인터셉터, MultipartResolver 등 Web 계층 관련 설정만 담는 게 원칙
    
    @Controller  : servlet-context.xml에서 component-scan
    @Component  @Repository  @Service   : root-context.xml에서 component-scan
   
   컨트롤러에 AOP 적용 안되는 이유?
   1.Spring MVC의 HandlerMapping 단계에서 이미 Handler(Controller)가 결정됨
   2.Controller는 프록시 객체가 아닌 실제 객체로 등록되어 사용되므로 AOP 적용이 어렵다
   3.Controller에 트랜잭션이나 로깅 같은 AOP를 쓰는 건 권장되지 않음
   
   Service 계층에서 로깅, 트랜잭션, 보안 등 공통 로직을 처리하는 것이 AOP 적용에 가장 적합
   만약 Controller 로직에도 꼭 적용하고 싶다면 Filter, HandlerInterceptor 또는 Servlet Filter를 사용하는 것이 일반적
   
   
    -->
    
 
	 
    <context:component-scan base-package="com.shinhan.spring.controller,com.shinhan.spring.socket,com.shinhan.spring.springjwt.controller" />
     
    
    <!-- emp아래의 모든 요청을 가로챈다.(/emp/**)  -->
    
    <mvc:interceptors>
	    <mvc:interceptor>
	        <mvc:mapping path="/emp/emplist.do" />	        
	        <bean class="com.shinhan.spring.aop.LoggingIntercepter" />
	    </mvc:interceptor>
    </mvc:interceptors>

    
    

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven /> 

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적자원의 위치지정시 이용  webapp/resources -->
	<mvc:resources mapping="/resources/**" location="/resources/" />



    <!-- Static Resource Handler -->
     <!--<mvc:resources mapping="/static/**" location="/static/"/>
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/images/**" location="/images/"/> -->
    
    
    
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>   
	
	<!-- Tiles 설정 -->
<!-- <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
    <property name="definitions">
        <list>
            <value>/WEB-INF/tiles/tiles.xml</value>
        </list>
    </property>
</bean> -->

<!-- ViewResolver: TilesView로 변경 -->
<!-- <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
</bean> -->

	
	
	
</beans>
